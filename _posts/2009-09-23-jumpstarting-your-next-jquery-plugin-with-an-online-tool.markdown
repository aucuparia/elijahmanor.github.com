---
layout: post
title: Jumpstarting Your Next jQuery Plugin with an Online Tool
date: '2009-09-23 00:57:00'
---

<p>The following screencast focuses on how to quickly make a jQuery plugin. The intent is not to dig deep into the ins and outs of a jQuery Plugin’s wiring. If that is what you are looking for there are many other good tutorials out there for that such as… </p>  <ul><li><a href="http://net.tutsplus.com/videos/screencasts/you-still-cant-create-a-jquery-plugin/">You Still Can’t Create a jQuery Plugin?</a> by <a href="http://www.jeff-way.com/">Jeffrey Way</a> </li>    <li><a href="http://www.learningjquery.com/2007/10/a-plugin-development-pattern">A Plugin Deveopment Pattern</a> by <a href="http://www.malsup.com/jquery/">Mike Alsup</a> </li>    <li><a href="http://www.sitepoint.com/blogs/2009/07/22/how-to-develop-a-jquery-plugin/">How to Develop a jQuery Plugin</a> by <a href="http://www.sitepoint.com/articlelist/560">Craig Buckler</a> </li> </ul><p>This screencast’s focus is to build off of your current knowledge of how to build a jQuery Plugin (although it doesn’t have to be too deep), and allow you to quickly focus on the building your plugin, rather than worrying about how all the little pieces are wired together. </p>  <p>The tool we will be using is called <a href="http://starter.pixelgraphics.us/">Starter: jumptstart Your jQuery Plugins</a> and you just provide the new jQuery Plugin name, optional namespace, parameters, options, etc… and then you are on your way focusing on the guts of your Plugin.</p>   <p> </p>  <p><strong>Update</strong>: This screencast has been posted on Nettuts+ for voting. If you like it, then please consider voting for the <a href="http://net.tutsplus.com/articles/general/voting-begins-the-first-5-screencast-contestants/" target="_blank">3rd entry on the Nettuts+ blog post…</a></p>  <p>The plugin that we will be creating is an ImageTextOverlay that will allow you to provide a list of message and overlay them over a message. The message will fade in and out in succession and you will be able to change the properties of each message (such as it’s location, size, color, etc…). I was inspired to write this small plugin after hearing someone on Twitter wanting something similar to this.</p>  <p>Sometimes it is easiest if we look at how we want to use our Plugin before actually creating it. So, here is a simple page that is selecting an image and calling our imageTextOverlay plugin. You can see how there is a default top & left positions provided and then a list of messages. Each message only needs to have a text property provided, but you can also provide many other properties to override the default values. </p>  <pre><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><br><html xmlns="http://www.w3.org/1999/xhtml"><br><head><br>    <title></title><br>    <script src="jquery-1.3.2.min.js" type="text/javascript"></script><br>    <script src="jquery.imagetextoverlay.js" type="text/javascript"></script><br>    <script type="text/javascript"><br>        $(function() {<br>            $('#ctlImage').imageTextOverlay({<br>                top: "10px",<br>                left: "10px",<br>                messages: [{<br>                        text: "Message 1"<br>                    }, {<br>                        text: "Message 2",<br>                        top: "50px",<br>                        left: "50px",<br>                        fontSize: "22px"<br>                    }, {<br>                        text: "Message 3",<br>                        top: "100px",<br>                        left: "100px",<br>                        color: "black",<br>                        fontSize: "48px",<br>                        backgroundColor: "#CCCCCC"<br>                    }, {<br>                        text: "Message 4",<br>                        top: "200px",<br>                        left: "200px",<br>                        letterSpacing: "-1px",<br>                        color: "red",<br>                        fontSize: "24px",<br>                        backgroundColor: "white"<br>                    }<br>                ]<br>            });<br>        });    <br>    </script><br></head><br><body><br>    <img id="ctlImage" src="curtains.jpg" /><br></body><br></html></pre> <p>The next step is to starting entering our plugin Class Name and Default Options into the <a href="http://starter.pixelgraphics.us/">Starter: jumptstart Your jQuery Plugins</a> online tool. Then we just click the Create button to prototype out our plugin! We can either copy/paste the results into our own file or there is even a Download button so you don’t have to copy/paste :)</p> <p><a href="http://elijahmanor.com/webdevdotnet/image.axd?picture=StarterInput.png"><img title="StarterInput" border="0" alt="StarterInput" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=StarterInput_thumb.png" width="604" height="456"></a> </p> <p>Now we can focus on writing the core logic of our jQuery plugin and not have to worry about all the nuts and bolts of how a plugin should be structured. So, here is what I put together for the ImageTextOverlay plugin. I will highlight only the lines of code that I actually wrote… everything else was generated by the online tool!</p> <pre>(function($){<br><br>    $.ImageTextOverlay = function(el, options){<br>        // To avoid scope issues, use 'base' instead of 'this'<br>        // to reference this class from internal events and functions.<br>        var base = this;<br><br>        // Access to jQuery and DOM versions of element<br>        base.$el = $(el);<br>        base.el = el; <br><br>        // Add a reverse reference to the DOM object<br>        base.$el.data("ImageTextOverlay", base);<br><br>        base.init = function(){<br><br>            base.options = $.extend({},$.ImageTextOverlay.defaultOptions, options);<br><br>            // Put your initialization code here<br>            base.createAndUpdateImageText(base.$el, base.options);<br>        }<br><br>        // Sample Function, Uncomment to use<br>        // base.functionName = function(paramaters){<br>        //     <br>        // }<br><br>        base.createAndUpdateImageText = function($ctlImage, options) {<br>            var $ctlText = base.createImageText();<br>            base.updateImageText($ctlImage, $ctlText, options, function() {<br>               base.createAndUpdateImageText($ctlImage, options);<br>            });<br>        }        <br><br>        base.createImageText = function() {<br>            var $imageText = $('#ctlImageText');<br><br>            if ($imageText.length == 0) {<br>                $('<div id="ctlImageText" />')<br>                    .css({<br>                        position: "absolute"<br>                    })<br>                    .appendTo('body')<br>                    .hide();<br>                $imageText = $('#ctlImageText');<br>            }<br><br>            return $imageText;<br>        }    <br><br>        base.messageIndex = 0;<br>        base.updateImageText = function($ctlImage, $ctlText, options, onComplete) {<br>            var message = options.messages[base.messageIndex++ % options.messages.length];<br>            var messageOptions = $.extend({}, options, message);<br>            $ctlText.html(message.text).css({<br>                fontSize: messageOptions.fontSize<br>            });<br><br>            $ctlText.css({<br>                top: messageOptions.top,<br>                left: messageOptions.left,<br>                color: messageOptions.color,<br>                letterSpacing: messageOptions.letterSpacing,<br>                backgroundColor: messageOptions.backgroundColor,<br>            }).fadeIn('slow').animate({ opacity: 1.0 }, 3000).fadeOut('slow', function() {<br>                onComplete();<br>            });<br>        }<br><br>        base.init();<br>    }<br><br>    $.ImageTextOverlay.defaultOptions = {<br>        fontSize: "24px",<br>        letterSpacing: "normal",<br>        color: "white",<br>        backgroundColor: "transparent"<br>    }<br><br>    $.fn.imageTextOverlay = function(options){<br>        return this.each(function(){<br>            (new $.ImageTextOverlay(this, options));<br>        });<br>    }<br><br>    // This function breaks the chain, but returns<br>    // the ImageTextOverlay if it has been attached to the object.<br>    $.fn.getImageTextOverlay = function(){<br>        return this.data("ImageTextOverlay");<br>    }<br><br>})(jQuery);</pre> <p>As I mentioned above, I only wrote the lines that are highlighted. The rest of the plugin was written by the <a href="http://starter.pixelgraphics.us/">Starter: jumptstart Your jQuery Plugins</a> online tool!</p> <p>If you are interested in other screencasts, I have made several others that you may be interested in as well…</p> <ul><li><a href="http://elijahmanor.com/webdevdotnet/post/Firefinder-Add-on-for-Firebug-Add-on-for-Firefox.aspx">Firefinder for Firebug for Firefox for Fiddling with jQuery</a> </li>   <li><a href="http://elijahmanor.com/webdevdotnet/post/Digging-Into-The-FireQuery-Add-on-for-jQuery.aspx">Digging Into The FireQuery Add-on for jQuery</a> </li>   <li><a href="http://elijahmanor.com/webdevdotnet/post/Google-Page-Speed-Yahoo-YSlow-Firebug-Extensions-to-Increase-Web-Page-Performance.aspx">Page Speed & YSlow Firebug Extensions to Increase Web Page Performance</a> </li>   <li><a href="http://www.elijahmanor.com/webdevdotnet/post/ASPNET-AJAX-Add-ons-%28FireAtlas-FireCookie%29-for-Firefoxs-Firebug.aspx">ASP.NET AJAX Add-ons (FireAtlas & FireCookie) for Firefox's Firebug</a> </li>   <li><a href="http://elijahmanor.com/webdevdotnet/post/Unit-Testing-with-jQuery-using-FireUnit-QUnit.aspx" target="_blank">Unit Testing with jQuery using FireUnit & QUnit</a> </li></ul>