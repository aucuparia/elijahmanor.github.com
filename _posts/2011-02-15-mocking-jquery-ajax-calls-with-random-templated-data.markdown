---
layout: post
title: Mocking jQuery Ajax Calls with Random Templated Data
date: '2011-02-15 13:58:00'
---

In a recent blog post, <a href="http://www.elijahmanor.com/2011/02/mocking-jquery-ajax-call-in-aspnet-mvc.html">Mocking the jQuery Ajax Call in ASP.NET MVC 3 Music Store</a> , I showed you how you could use the <a href="http://enterprisejquery.com/2010/07/mock-your-ajax-requests-with-mockjax-for-rapid-development/">$.mockjax</a> library, written by <a href="http://twitter.com/jdsharp">Jonathan Sharp</a>, to intercept AJAX requests and return a mocked response. This tool can be especially useful when trying to code your front-end, while the back-end piece is either isn't available or accessible.<br><br>Another useful library that you may consider when building quick prototypes is <a href="http://experiments.mennovanslooten.nl/2010/mockjson/">$.mockJSON</a>, written by <a href="http://twitter.com/mennovanslooten">Menno van Slooten</a>. This library has some of the same features as $.mockjax, but the piece I'd like to focus on is the random data tempting feature. This can be very handy when you want to mock a JSON response from a AJAX call, but instead of manually building the response you can build a template to do it for you.<br><br>To demonstrate using this random data technique, I decided to use the <a href="https://github.com/mleibman/SlickGrid/wiki">SlickGrid</a> jQuery Plugin and populate it with the JSON response from an AJAX call. Since the AJAX call doesn't exist, I am going to use $.mockjax to return the response using random data generated from $.mockJSON.<br><br>The following code is what is necessary to populate the SlickGrid with data from an AJAX call.<br><br><pre>(function($) {<br><br>var grid,<br>  columns = [<br>    {id:"firstName", name:"First Name", field:"firstName", width:70},<br>    {id:"lastName", name:"Last Name", field:"lastName", width:70},<br>    {id:"email", name:"Email", field:"email", width:170},<br>    {id:"percentHealth", name:"% Health", field:"percentHealth", width:90, formatter:GraphicalPercentCompleteCellFormatter},<br>    {id:"birthday", name:"Birthday", field:"birthday", width:70},<br>    {id:"married", name:"Married", field:"married", width:50, formatter:BoolCellFormatter}<br>],<br>  options = {<br>    editable: false,<br>    enableAddRow: false,<br>    enableCellNavigation: true,<br>    rowCssClasses: function(item) {<br>      return (item.percentHealth >= 80) ? <br>        "healthy" : "";<br>    }<br>  };<br><br>$.ajax({<br>  url: "/Contact/List",<br>  type: "GET",<br>  dataType: "json",<br>  success: function(data, textStatus, xhr) {<br>    grid = new Slick.Grid("#myGrid", <br>      data.contacts, columns, options);<br>  },<br>  error: function(xhr, textStatus, errorThrown) {<br>    console.log("Error: " + textStatus);<br>  }<br>});<br><br>function BoolCellFormatter(row, cell, value, <br>  columnDef, dataContext) {<br>  return value ? "✔" : "";<br>};<br><br>}(jQuery));<br></pre>At this point, I don't have the <code>'/Contact/List'</code> endpoint defined so if I executed the above code I would get a <code>GET http://fiddle.jshell.net/Contact/List 404 (NOT FOUND)</code> error in my console. If I did want to test the behavior of my front-end without depending on a back-end existing, then I can add an additional $.mockjax statement to intercept the call and respond with some random data provided by $.mockjson.<br><br><pre>$.mockjax({<br>    url: '/Contact/List',<br>    responseTime: 750,<br>    responseText: $.mockJSON.generateFromTemplate({<br>        "contacts|50-500": [{<br>            "married|0-1": true,<br>            "email" : "@EMAIL",<br>            "firstName": "@MALE_FIRST_NAME",<br>            "lastName": "@LAST_NAME",<br>            "birthday": "@DATE_MM/@DATE_DD/@DATE_YYYY",<br>            "percentHealth|0-100": 0 <br>        }]<br>    })<br>});<br></pre>The above code will intercept any AJAX requests with the <code>'/Contact/List'</code> endpoint and will use the template passed to $.mockJSON as the response. The template will generate between 50 and 500 contacts each having male first names and having a health ranging from 0 to 100. Each contact will have a random email, birthday, and married boolean field. You can find out more information as to what $.mockJSON supports and how you can extend it from their <a href="http://experiments.mennovanslooten.nl/2010/mockjson/">website</a>.<br><br>The following JSON snippet is an example of what the above $.mockJSON template will generate. The above template would generate between 50 to 500 contacts, but for brevity I just included 4.<br><br><pre>{<br>  "contacts": [{<br>    "married": false,<br>    "email": "u.lewis@gonzalez.com",<br>    "firstName": "Paul",<br>    "lastName": "Martinez",<br>    "birthday": "12/16/2005",<br>    "percentHealth": 37},<br>  {<br>    "married": false,<br>    "email": "k.hernandez@smith.com",<br>    "firstName": "Daniel",<br>    "lastName": "Gonzalez",<br>    "birthday": "07/11/1997",<br>    "percentHealth": 1},<br>  {<br>    "married": true,<br>    "email": "c.thomas@taylor.com",<br>    "firstName": "David",<br>    "lastName": "Lewis",<br>    "birthday": "04/13/2007",<br>    "percentHealth": 62},<br>  {<br>    "married": true,<br>    "email": "v.davis@lee.com",<br>    "firstName": "Richard",<br>    "lastName": "Rodriguez",<br>    "birthday": "05/10/2007",<br>    "percentHealth": 6}]<br><br>  //A bunch more...<br><br>}<br></pre>Now, since we have some data coming back from our AJAX request, we can run our code again and proceed to get our front-end working as intended.<br><br><br><br><a href="http://jsfiddle.net/elijahmanor/y7gv4/show" target="_blank">View Demo</a> <a href="http://jsfiddle.net/elijahmanor/y7gv4/" target="_blank">Edit Demo</a><br><br>