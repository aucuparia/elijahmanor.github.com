---
layout: post
title: Using jQuery BlockUI Plugin with ASP.NET Input Form
date: '2009-07-15 19:17:00'
---

<p>I was recently working on an ASP.NET WebForm project where it made sense to use a modal dialog to confirm choices, to ask for additional information, etc…</p><p>I’ve used the <a href="http://malsup.com/jquery/block/#overview">jQuery BlockUI Plugin</a> before and I’ve always thought it provided a good mix of nice features as well as extreme customization.</p><p>Ii went ahead an implemented <a href="http://malsup.com/jquery/block/#overview">BlockUI</a> across the application and was satisfied on how it looked & felt, but I noticed some weird behavior on one of the modal screens. I had a screen that had numerous input controls (textboxes, dropdownlists, etc…) and when I posted back my results all of the input controls were blank!</p><p>Ahh, what do I do? Where are my updated input values?</p><p>Debugging Steps</p><ol><li>Check to make sure I wasn’t re-initializing the input controls on PostBack </li><li>Investigate that I didn’t turn off viewstate by accident & make sure I wasn’t using dynamic controls </li></ol><p>After those steps I was still confused and frankly wasting a lot of time with something I thought would be very quick.</p><p>To make a long story short, it was BlockUI that was clearing the input controls on PostBack!</p><p>So, I created a fresh demo application to replicate the issue and started investigating.</p><p>The following code shows how to recreate the issue and how to resolve the issue.</p><pre>    <div><br>        <asp:Panel ID="pnlMessage" runat="server" Visible="false"><br>            <asp:Label ID="lblMessage" runat="server" /><br /><br>        </asp:Panel><br>        <asp:Button id="ctlAddContact" runat="server" Text="Add Contact" /><br>    </div><br><br>    <div id="ctlAddContactModal" style="display: none;" class="modal"><br>        <h3>Add Contact</h3><br>        <dl><br>            <dt><asp:Label ID="lblFirstNameCaption" runat="server" AssociatedControlID="txtFirstName" Text="First Name" /></dt><br>            <dd><asp:TextBox ID="txtFirstName" runat="server" /></dd><br>            <dt><asp:Label ID="lblLastNameCaption" runat="server" AssociatedControlID="txtLastName" Text="Last Name" /></dt><br>            <dd><asp:TextBox ID="txtLastName" runat="server" /></dd><br>        </dl><br>        <div class="buttons"><br>            <asp:Button ID="btnCancel" runat="server" Text="Cancel" /><br>            <asp:LinkButton ID="btnFailureLink" runat="server" Text="Failure Save" CssClass="action" OnClick="btnFailureLink_Click" /><br>            <asp:LinkButton ID="btnSuccessLink" runat="server" Text="Success Save" CssClass="action" onclick="btnSuccessLink_Click" /><br>        </div><br>    </div><br></pre><pre> <br>    <script type="text/javascript"><br>        $(function() {<br>            $('#<%= ctlAddContact.ClientID %>').click(function(e) {<br>                e.preventDefault();<br>                $.blockUI({<br>                    message: $('#ctlAddContactModal'),<br>                    css: {<br>                        cursor: 'auto'<br>                    }    <br>                });<br>            });<br><br>            $('#<%= btnCancel.ClientID %>').click(function(e) {<br>                $.unblockUI();<br>            });<br><br>            var btnSuccessLinkId = '<%= btnSuccessLink.ClientID %>';<br>            $('#' + btnSuccessLinkId).click(function(e) {<br>                e.preventDefault();<br>                $.unblockUI({<br>                    onUnblock: function() {<br>                        eval($('#' + btnSuccessLinkId).attr('href'));<br>                    }<br>                });<br>            }); <br>        });<br>    </script> </pre><p>The issue is more obvious if you had used an <asp:Button /> in the above code snippet instead of an <asp:LinkButton /> as was the standard in my project. When using a <asp:Button /> the modal input form doesn’t submit at all! The BlockUI prevents the modal from from posting. I tried manipulating some of the plugin settings such as setting bindEvents = false and others, but nothing seemed to help.</p><p>So, the solution that works is…</p><ol><li>Attach a jQuery click event to your LinkButton </li><li>Prevent the default click behavior of the LinkButton </li><li>Unblock the modal window to restore default behavior of input form </li><li>Add an onUnblock event to the modal window and evaluate the LinkButton’s href </li></ol>