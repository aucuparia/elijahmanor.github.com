---
layout: post
title: 'jQuery jqGrid Plugin: Add, Edit, Delete with ASP.NET MVC'
date: '2010-07-01 12:58:00'
---

<p> </p><h4>Introduction</h4><p>There are a lot of articles out there that show you how to integrate with the <a href="http://www.trirand.com/blog/" target="_blank">jQuery jqGrid Plugin</a> from a listing, paging, sorting approach, but I haven’t seen many that show the integration with the add/edit/delete features that jqGrid offers.</p><p>It turns out that it isn’t very difficult to do, but it took quite a bit of digging in the <a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:form_editing" target="_blank">jqGrid API documentation</a> for me to find all the things I needed.</p><p>The following article will show how to customize the add/edit/delete modal experience inside of the jqGrid with ASP.NET MVC. </p><h4>Contact ViewModel</h4><p>First, you start off with your ViewModel. In this case the following is really bare bones. I haven’t annotated the properties with metadata because I actually do that <a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:common_rules#editrules" target="_blank">manually in the jqGrid columns</a>. That isn’t optimal, but it would be nice to have these automatically mapped. That sounds like another blog post ;)</p><pre>public class ContactViewModel<br>{<br>    public System.Guid ContactId { get; set; }<br><br>    public string Name { get; set; }<br><br>    public string Email { get; set; }<br><br>    public string PhoneNumber { get; set; }<br><br>    public DateTime DateOfBirth { get; set; }<br><br>    public bool IsMarried { get; set; }<br>}</pre><h4>Contact View</h4><p>The following code setups up the jqGrid to support add, edit, and delete. </p><p>The first function you’ll see is a custom validator that checks to see if the phone number has a length of 14. Yes, it isn’t bullet-proof validation by any stretch of the imagination, but its more of an example of what can be done.</p><p>Next you’ll see the updateDialog object literal defining the look and behavior of the add, edit, and delete dialog windows. The main property to define is the URL where the AJAX requests will post the data. You can also control whether the dialog closes immediately, if it’s a modal dialog, etc…</p><p>The next important thing to notice is the “key: true” property of the ContactId column. If you don’t set this property then the POST for the delete command  only send the relative ID that jqGrid generates, not the ContactId that you need. So, this is important ;)</p><p><strong>Note:</strong> <em>You’ll see some code below setting global properties for the jqGrid such as the title of the dialogs, buttons, etc. If you don’t do this then you’ll get generic titles. I figured these customizations made the user experience a little nicer, but things will work just find without them.</em></p><pre>function isValidPhone(value, name) {<br>    console.log('isValidPhone');<br>    var errorMessage = name + ': Invalid Format';<br>    var success = value.length === 14;<br>    return [success, success ? '' : errorMessage];<br>}  <br><br>$(document).ready(function () {<br>    var updateDialog = {<br>        url: '<%= Url.Action("Update", "Contact") %>'<br>        , closeAfterAdd: true<br>        , closeAfterEdit: true<br>        , afterShowForm: function (formId) {<br>            $("#PhoneNumber").mask("(999) 999-9999");<br>            $("#DateOfBirth").datepicker();<br>        }<br>        , afterclickPgButtons: function (whichbutton, formid, rowid) {<br>            $("#PhoneNumber").mask("(999) 999-9999");<br>        }<br>        , modal: true<br>        , width: "400"<br>    };<br><br>    $.jgrid.nav.addtext = "Add";<br>    $.jgrid.nav.edittext = "Edit";<br>    $.jgrid.nav.deltext = "Delete";<br>    $.jgrid.edit.addCaption = "Add Contact";<br>    $.jgrid.edit.editCaption = "Edit Contact";<br>    $.jgrid.del.caption = "Delete Contact";<br>    $.jgrid.del.msg = "Delete selected Contact?";<br><br>    $("#list").jqGrid({<br>        url: '<%= Url.Action("List", "Contact") %>',<br>        datatype: 'json',<br>        mtype: 'GET',<br>        colNames: ['ContactId', 'Name', 'Date of Birth', 'E-mail', 'Phone Number', 'Married'],<br>        colModel: [<br>            { name: 'ContactId', index: 'ContactId', width: 40, align: 'left', key: true, editable: true, editrules: { edithidden: false }, hidedlg: true, hidden: true },<br>            { name: 'Name', index: 'Name', width: 300, align: 'left', editable: true, edittype: 'text', editrules: { required: true }, formoptions: { elmsuffix: ' *'} },<br>            { name: 'DateOfBirth', index: 'DateOfBirth', width: 200, align: 'left', formatter: 'date', datefmt: 'm/d/Y', editable: true, edittype: 'text', editrules: { required: true, date: true }, formoptions: { elmsuffix: ' *'} },<br>            { name: 'Email', index: 'Email', width: 200, align: 'left', formatter: 'mail', editable: true, edittype: 'text', editrules: { required: true, email: true }, formoptions: { elmsuffix: ' *'} },<br>            { name: 'PhoneNumber', index: 'PhoneNumber', width: 200, align: 'left', editable: true, edittype: 'text', editrules: { required: true, custom: true, custom_func: isValidPhone }, formoptions: { elmsuffix: ' *'} },<br>            { name: 'IsMarried', index: 'IsMarried', width: 200, align: 'left', editable: true, edittype: 'checkbox', editoptions: { value: "True:False" }, editrules: { required: true}}],<br>        pager: $('#listPager'),<br>        rowNum: 1000,<br>        rowList: [1000],<br>        sortname: 'ContactId',<br>        sortorder: "desc",<br>        viewrecords: true,<br>        imgpath: '/Content/Themes/Redmond/Images',<br>        caption: 'Contact List',<br>        autowidth: true,<br>        ondblClickRow: function (rowid, iRow, iCol, e) {<br>            $("#list").editGridRow(rowid, prmGridDialog);<br>        }<br>    }).navGrid('#listPager',<br>        {<br>            edit: true, add: true, del: true, search: false, refresh: true<br>        },<br>        updateDialog,<br>        updateDialog,<br>        updateDialog<br>    );<br>}); </pre><h4>Contact Controller Update Action</h4><p>The add/update/delete feature takes one URL where you can change the logic based on the operation type. The MVC Modal Binder will map the fields into your ViewModel in most cases. The exception is the “id” that is passed on the delete operation, but there is a way to get around that later in this post ;)</p><pre>public ActionResult Update(ContactViewModel viewModel, FormCollection formCollection)<br>{<br>    var operation = formCollection["oper"];<br>    if (operation.Equals("add") || operation.Equals("edit"))<br>    {<br>        repository.SaveOrUpdate(new ContactViewModel<br>        {<br>            ContactId = viewModel.ContactId,<br>            DateOfBirth = viewModel.DateOfBirth,<br>            Email = viewModel.Email,<br>            IsMarried = viewModel.IsMarried,<br>            Name = viewModel.Name,<br>            PhoneNumber = viewModel.PhoneNumber<br>        });<br>    }<br>    else if (operation.Equals("del"))<br>    {<br>        repository.Delete(new ContactViewModel<br>        {<br>            ContactId = new Guid(formCollection["id"])<br>        });<br>    }<br><br>    return Content(repository.HasErrors.ToString().ToLower()); <br>}</pre><h4>What About Using Complex Keys?</h4><p>Instead of having ContactId (“key: true”) as your key to delete, you might have a more complex key to identify which item to delete. As it turns out, you can bind to the onclickSubmit event of the add/edit/delete dialog and change what data is POST’ed to the controller.</p><p>A nice side effect of this is that you name your property such that the MVC Modal Binder works.</p><p><strong>Updated Dialog Object Literal</strong></p><pre>var updateDialog = {<br>    url: '<%= Url.Action("Update", "Contact") %>'<br>    , closeAfterAdd: true<br>    , closeAfterEdit: true<br>    , afterShowForm: function (formId) {<br>        $("#PhoneNumber").mask("(999) 999-9999");<br>        $("#DateOfBirth").datepicker();<br>    }<br>    , afterclickPgButtons: function (whichbutton, formid, rowid) {<br>        $("#PhoneNumber").mask("(999) 999-9999");<br>    }<br>    , modal: true<br>    , onclickSubmit: function (params) {<br>        var ajaxData = {};<br><br>        var list = $("#list");<br>        var selectedRow = list.getGridParam("selrow");<br>        rowData = list.getRowData(selectedRow);<br>        ajaxData = { ContactId: rowData.ContactId };<br><br>        return ajaxData;<br>    }<br>    , width: "400"<br>};</pre><p><strong>Updated Contact Controller Update Action</strong></p><pre>public ActionResult Update(ContactViewModel viewModel, FormCollection formCollection)<br>{<br>    var operation = formCollection["oper"];<br>    if (operation.Equals("add") || operation.Equals("edit"))<br>    {<br>        repository.SaveOrUpdate(new ContactViewModel<br>        {<br>            ContactId = viewModel.ContactId,<br>            DateOfBirth = viewModel.DateOfBirth,<br>            Email = viewModel.Email,<br>            IsMarried = viewModel.IsMarried,<br>            Name = viewModel.Name,<br>            PhoneNumber = viewModel.PhoneNumber<br>        });<br>    }<br>    else if (operation.Equals("del"))<br>    {<br>        repository.Delete(new ContactViewModel<br>        {<br>            ContactId = viewModel.ContactId<br>        });<br>    }<br><br>    return Content(repository.HasErrors.ToString().ToLower()); <br>}</pre><h4>Conclusion</h4><p>I hope you found the above article of some use in your everyday coding. The jqGrid also provides an inline editing feature similar to what you might experience in an Excel grid. You might look into that if you are interested.</p><p>Please give me your feedback. Thanks!</p><p><a href="http://github.com/elijahmanor/jqGridAddEditDelete" target="_blank">Download Source Code</a></p><br><link href="http://alexgorbatchev.com/pub/sh/current/styles/shCore.css" rel="stylesheet" type="text/css"><link href="http://alexgorbatchev.com/pub/sh/current/styles/shThemeRDark.css" rel="stylesheet" type="text/css"><br>