---
layout: post
title: 'New Pluralsight Course: Fixing Common JavaScript Bugs'
date: '2013-08-22 16:00:00'
---

<div><a href="http://manor.im/etm-ps-fbjsb" imageanchor="1" target="_blank"><img border="0" height="70" src="http://1.bp.blogspot.com/-iT8ZMsliPzw/UhYu2eIoz1I/AAAAAAAAfkw/PvI9nvWQlzc/s640/8-22-2013+10-29-41+AM.png" width="640"></a></div><br>I'm pleased to announced that my last Pluralsight course has been released <a href="http://manor.im/etm-ps-fbjsb" target="_blank">Fixing Common JavaScript Bugs</a>.<br><br><div><a href="http://3.bp.blogspot.com/-__8O2HuZPhg/UhYyM7P61EI/AAAAAAAAfk8/d6lvPFRkfkE/s1600/sherlock1.jpg" imageanchor="1"><img border="0" height="140" src="http://3.bp.blogspot.com/-__8O2HuZPhg/UhYyM7P61EI/AAAAAAAAfk8/d6lvPFRkfkE/s200/sherlock1.jpg" width="200"></a></div>

This is not your typically "Let's learn JavavScript Course" from beginning to end. You can think of this course more like various episodes of Sherlock wherein you unexpectedly encounter a piece of dead rotting JavaScript and you must use your keen detective skills to identify and unpack the reason for its demise. And then, armed with the knowledge of the crime, you will be able to reconstruct the code back to it's original glory.<br><br>Since each clip is a mini-mystery, the names of the clip is more of a clue in order to not give away the culprit. However, to give you a taste of what you will encounter, here are some of the topics within...<br><ul><li>Rules for Automatic Semicolon Insertion</li><li>Rules for how values are coerced when using ==</li><li>Different techniques to control the `this` implicit parameter</li><li>What hoisting is and how it can be different when declaring functions</li><li>Benefits of strict mode and a gotcha to watch out for</li><li>Gotchas with trailing commas</li><li>Reserved words and what to watch out for</li><li>Strange things when using numbers</li><li>Issues you may run into when checking types</li><li>The importance of truthy/falsey</li><li>Fake function overloading</li><li>When to use a closure and what one looks like</li><li>Various ways converting from one type to another</li><li>Weirdness with type wrappers</li><li>... and more ...</li></ul>

Regardless if you use VanillaJS, jQuery, Backbone.js, AngularJS, KnockoutJS, Ember.js, or any other various library or framework, you will inevitably run into a JavaScript bug and will need to debug it. The focus of this course is not "how to debug", but rather the goal is to equip you with the knowledge of "how to identify a bug". In addition, we'll unpack what really is going on so that hopefully you can protect yourself from making future bugs or at least fix them quicker.

Do you feel like a little code mystery? Fire up your screen of choice (iPad, Apple TV, laptop, etc) and take a stab at <a href="http://manor.im/etm-ps-fbjsb" target="_blank">Fixing Common JavaScript Bugs</a>.