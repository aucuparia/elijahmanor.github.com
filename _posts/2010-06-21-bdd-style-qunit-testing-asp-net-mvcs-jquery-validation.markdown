---
layout: post
title: BDD-Style QUnit Testing ASP.NET MVC’s jQuery Validation
date: '2010-06-21 14:10:00'
---

<h4>Client-Side Unit Testing</h4><br><div><a href="https://lh6.googleusercontent.com/-HATo22AITbw/TX2VFE3wqJI/AAAAAAAAJac/ef7_teWi86g/s1600/ContactsApp.jpg" imageanchor="1"><img border="0" src="https://lh6.googleusercontent.com/-HATo22AITbw/TX2VFE3wqJI/AAAAAAAAJac/ef7_teWi86g/s640/ContactsApp.jpg" width="555"></a></div><br>The goal of this blog post is to show how you can utilize some helpful techniques to easily Unit Test your Web Application. In this post I will focus on Unit Testing the Client-Side validation rules that ASP.NET MVC generates. You can apply the following techniques to pretty much any scenario, but since this is something I do, I thought I’d share.<br><br>Our sample applications is a Contact Manager. At this point we only have a toolbar with a “New Contact” button. When the button is clicked a “New Contact” dialog will appear with several input fields and a “Save” and “Cancel” button. All of the fields are required, so if the user clicks the “Save” button client-validation should verify that all fields have a value.<br><br><h4>ASP.NET MVC Contact ViewModel</h4><br>First lets take a look at our ViewModel which will drive the rules of our client-side validation.<br><br><pre>using System;<br>using System.ComponentModel;<br>using System.ComponentModel.DataAnnotations;<br>using System.Web.Mvc;<br><br>namespace jQueryUnitTestingFormValidation.Models<br>{<br>    public class ContactViewModel<br>    {<br>        [HiddenInput(DisplayValue = false)]<br>        public System.Guid Id { get; set; }<br><br>        [Required(ErrorMessage = "Name Required")]<br>        [DisplayName("Name")]<br>        [StringLength(50, ErrorMessage = "Name must be less than or equal to 50 characters")]<br>        public string Name { get; set; }<br><br>        [Required(ErrorMessage = "Email Required")]<br>        [DisplayName("E-mail")]<br>        [StringLength(50, ErrorMessage = "Email must be less than or equal to 50 characters")]<br>        [DataType(DataType.EmailAddress)]<br>        [RegularExpression(@"^([a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\s*;?\s*)+$", ErrorMessage = "Email must be valid")]<br>        public string Email { get; set; }<br><br>        [Required(ErrorMessage = "Phone Number Required")]<br>        [DisplayName("Phone Number")]<br>        [StringLength(50, ErrorMessage = "Phone must be less than or equal to 50 characters")]<br>        public string PhoneNumber { get; set; }<br><br>        [Required(ErrorMessage = "Date of Birth Required")]<br>        [DisplayName("Date of Birth")]<br>        public DateTime? DateOfBirth { get; set; }<br><br>        [Required(ErrorMessage = "Required")]<br>        [DisplayName("Is Married")]<br>        public bool IsMarried { get; set; }<br>    }<br>}</pre><br><h4>ASP.NET MVC Contact View</h4><br>Our View is pretty simple. I decided for this sample to not modify the MasterPages that the Templated Helpers use. You’ll see that I’m call the LabelFor, EditorFor, and ValidationMessageFor and organizing them as I wish. If you are interested in a cleaner way to do this you can check out a previous blog entry I wrote entitled <a href="http://elijahmanor.com/webdevdotnet/post/Opinionated-ASPNET-MVC-2-Template-Helpers.aspx" target="_blank">Opinionated ASP.NET MVC 2 Template Helpers</a>.<br><br><pre><div id="createDialog" title="New Contact" style="display: none;"><br>    <% Html.EnableClientValidation(); %> <br>    <% using (Html.BeginForm("Create", "Contact", FormMethod.Post, new {@id = "createPost"})) { %><br>        <dl><br>            <dt><%= Html.LabelFor(m => m.Name) %></dt><br>            <dd><br>                <%= Html.EditorFor(m => m.Name) %><br>                <%= Html.ValidationMessageFor(m => m.Name) %><br>            </dd><br>            <dt><%= Html.LabelFor(m => m.Email) %></dt>            <br>            <dd><br>                <%= Html.EditorFor(m => m.Email) %><br>                <%= Html.ValidationMessageFor(m => m.Email)%><br>            </dd><br>            <dt><%= Html.LabelFor(m => m.PhoneNumber) %></dt><br>            <dd><br>                <%= Html.EditorFor(m => m.PhoneNumber) %><br>                <%= Html.ValidationMessageFor(m => m.PhoneNumber)%><br>            </dd><br>            <dt><%= Html.LabelFor(m => m.DateOfBirth) %></dt><br>            <dd><br>                <%= Html.EditorFor(m => m.DateOfBirth) %><br>                <%= Html.ValidationMessageFor(m => m.DateOfBirth)%><br>            </dd><br>            <dt><%= Html.LabelFor(m => m.IsMarried) %></dt><br>            <dd><br>                <%= Html.EditorFor(m => m.IsMarried) %><br>                <%= Html.ValidationMessageFor(m => m.IsMarried)%><br>            </dd>            <br>        </dl><br>    <% } %>    <br></div></pre><br><h4>JavaScript Contact Revealing Module</h4><br>The Contact Revealing Module contains the logic to initialize the button and dialog events, post the form to the Controller, etc… <br><br><strong>Note</strong>: <em>I am utilizing the </em><a href="http://www.klauskomenda.com/code/javascript-programming-patterns/"><em>Revealing Module Pattern</em></a><em> for those of you who might not be aware of it. It is very helpful in splitting up your JavaScript code into testable and reusable modules.</em><br><br><pre>var contactCreateModule = (function () {<br>    var public = {},<br>        dialogWidth = 800;<br><br>    public.createDialog;<br>    public.createPost;<br><br>    public.init = function () {<br>        public.createDialog = $("#createDialog");<br>        public.createPost = $("#createPost");<br><br>        public.initEventHandlers();<br>    };<br><br>    public.initEventHandlers = function () {<br>        public.initToolbar();<br><br>        public.initDialog();<br>    };<br><br>    public.initToolbar = function () {<br>        $("#toolbar button").button();<br><br>        $("#createContact").click(function () {<br>            public.displayCreate();<br>        });<br>    };<br><br>    public.initDialog = function () {<br>        $(".datePicker").datepicker();<br><br>        public.createDialog.dialog({<br>            autoOpen: false<br>            , width: dialogWidth<br>            , modal: true<br>            , open: validationModule.clearValidationMessages<br>            , buttons: {<br>                "Cancel": function () {<br>                    public.createDialog.dialog("close");<br>                },<br>                "Save": function () {<br>                    if (public.createPost.valid()) {<br>                        public.createDialog.dialog("close");<br>                        public.postContact();<br>                    }<br>                }<br>            }<br>        });<br>    };<br><br>    public.displayCreate = function () {<br>        public.createDialog<br>            .dialog("open")<br>            .find("input:first")<br>            .focus();<br>    };<br><br>    public.postContact = function (callback) {<br>        $.ajaxSettings.traditional = true;<br>        $.ajax({<br>            url: public.createPost.attr("action"),<br>            data: public.createPost.serialize(),<br>            type: "POST",<br>            success: function (data, textStatus, xhr) {<br>                public.postContactSuccess(data, textStatus, xhr);<br>                callback(data && data.Success);<br>            },<br>            error: public.postContactError<br>        });<br>    };<br><br>    public.postContactSuccess = function (data, textStatus, xhr) {<br>        if (data && data.Success) {<br>            notificationModule.displayMessage(true, "Your contact has been created!");<br>        } else {<br>            notificationModule.displayMessages(data.Success, data.Messages);<br>        }<br>    };<br><br>    public.postContactError = function (xhr, textStatus, error) {<br>        var errorMessage = exception ? exception : xhr.statusText;<br>        notificationModule.displayMessage(false, "There was an error creating your contact: " + errorMessage);<br>    };<br><br>    return public;<br>} ());</pre><br><h4>Classic QUnit Style Tests</h4><br>I initially started this blog post using standard QUnit syntax, but there was something about it that didn’t stand well with me. In particular, I didn’t like how I had a bunch of asserts all lumped together. Later in this article I switch out the classic QUnit-Style with a BDD-Style syntax.<br><br>The following are some screenshots from the Unit Tests…<br><br><div><a href="https://lh6.googleusercontent.com/-nUad8bPcA_I/TX2XE21VWrI/AAAAAAAAJag/pXfgMiX_v2s/s1600/xUnitTests.jpg" imageanchor="1"><img border="0" src="https://lh6.googleusercontent.com/-nUad8bPcA_I/TX2XE21VWrI/AAAAAAAAJag/pXfgMiX_v2s/s640/xUnitTests.jpg" width="555"></a></div><br>The following is a slightly zoomed in view of the above image. You can see that all the asserts for one particular test are hidden beneath it. You can expand &| collapse the test to see each individual assert.<br><br><div><a href="https://lh5.googleusercontent.com/-GgxaML5EjIw/TX2XLFlDYbI/AAAAAAAAJak/uO9GG9J1Yak/s1600/xUnitClose.jpg" imageanchor="1"><img border="0" src="https://lh5.googleusercontent.com/-GgxaML5EjIw/TX2XLFlDYbI/AAAAAAAAJak/uO9GG9J1Yak/s640/xUnitClose.jpg" width="555"></a></div><br>You can view the unit tests below that generated the above screen shots. <br>Since I don’t want the $.ajax call to actually occur in my Unit Tests, I swap out the default functionality with a stub function instead in the module setup (which is called before each test). In the module teardown (which is called after each test) I restore the default functionality in case any future test needs it.<br><br><pre>var contactWasPosted = false;<br>module("Contact: Create", {<br>    setup: function () {<br>        contactWasPosted = false;<br><br>        contactCreateModule.postContactBackup = contactCreateModule.postContact;<br>        contactCreateModule.postContact = function (callback) {<br>            contactWasPosted = true;<br>        };<br>    },<br>    teardown: function () {<br>        contactCreateModule.postContact = contactCreateModule.postContact;<br>        contactCreateModule.createDialog.dialog('close');<br>    }<br>});<br><br>test("When New Contact Button Clicked", function () {<br>    //Arrange<br><br>    //Act<br>    $("#createContact").click();<br><br>    //Assert<br>    ok($("#createDialog:visible").length, "Dialog Should Display");<br>    ok($("#Name_validationMessage:not(:visible)").length, "Name Validation Should Not Display");<br>    ok($("#Email_validationMessage:not(:visible)").length, "Email Validation Should Not Display");<br>    ok($("#PhoneNumber_validationMessage:not(:visible)").length, "PhoneNumber Validation Should Not Display");<br>    ok($("#DateOfBirth_validationMessage:not(:visible)").length, "DateOfBirth Validation Should Not Display");<br>    ok($("#IsMarried_validationMessage:not(:visible)").length, "IsMarried Validation Should Not Display");<br>});<br><br>test("When Click Save On an Empty Form", function () {<br>    //Arrange<br>    $("#createContact").click();<br><br>    //Act<br>    $(".ui-button-text:contains('Save')").parent().click();<br><br>    //Assert<br>    ok($("#Name_validationMessage:visible").length, "Name Validation Should Display");<br>    ok($("#Email_validationMessage:visible").length, "Email Validation Should Display");<br>    ok($("#PhoneNumber_validationMessage:visible").length, "PhoneNumber Validation Should Display");<br>    ok($("#DateOfBirth_validationMessage:visible").length, "DateOfBirth Validation Should Display");<br>    ok($("#IsMarried_validationMessage:visible").length, "IsMarried Validation Should Display");<br>    ok($("#createDialog:visible").length, "Dialog Should Remain Displayed");<br>});<br><br>test("When Click Save On an Complete Form", function () {<br>    //Arrange<br>    $("#createContact").click();<br><br>    $("#Name").val("xNamex");<br>    $("#Email").val("tasty@bacon.com");<br>    $("#PhoneNumber").val("xPhoneNumberx");<br>    $("#DateOfBirth").val("xDateOfBirthx");<br>    $("#IsMarried").attr("checked", true);<br><br>    //Act<br>    $(".ui-button-text:contains('Save')").parent().click();<br><br>    //Assert<br>    ok($("#Name_validationMessage:not(:visible)").length, "Name Validation Should Not Display");<br>    ok($("#Email_validationMessage:not(:visible)").length, "Email Validation Should Not Display");<br>    ok($("#PhoneNumber_validationMessage:not(:visible)").length, "PhoneNumber Validation Should Not Display");<br>    ok($("#DateOfBirth_validationMessage:not(:visible)").length, "DateOfBirth Validation Should Not Display");<br>    ok($("#IsMarried_validationMessage:not(:visible)").length, "IsMarried Validation Should Not Display");<br>    ok(contactWasPosted, "Contact Should Post");<br>    ok($("#createDialog:not(:visible)").length, "Dialog Should Be Closed");<br>});</pre><br><h4>BDD Style QUnit Tests </h4><br>After talking more with Dan Mohl (@dmohl) I decided I wanted to try to find a Behavior Driven style of writing QUnit tests. I know there are several other BDD Client-Side Unit Test frameworks out there, but I wanted to keep to the QUnit runner for now. <br><br>So, during my research the author of <a href="http://github.com/mmonteleone/pavlov" target="_blank">Pavlov</a>, Michael Monteleone (<a href="http://twitter.com/namelessmike" target="_blank">@namelessmike</a>), let me know about his project, which ended up to be exactly what I was looking for.<br><br>The following is the output of my tests using QUnit and Pavlov…<br><br><div><a href="https://lh4.googleusercontent.com/-1RWcdGw5bT4/TX2XcI2mRbI/AAAAAAAAJao/AN5F4s_kiF0/s1600/ContactSpecificiationsDropShadow.jpg" imageanchor="1"><img border="0" src="https://lh4.googleusercontent.com/-1RWcdGw5bT4/TX2XcI2mRbI/AAAAAAAAJao/AN5F4s_kiF0/s640/ContactSpecificiationsDropShadow.jpg" width="555"></a></div><br>Here is a slightly zoomed in view of the QUnit Pavlov test output…<br><br><div><a href="https://lh5.googleusercontent.com/-cHqODVYEL5E/TX2Xis7ZZ0I/AAAAAAAAJas/sjC9Q7ddhVk/s1600/BddClose.jpg" imageanchor="1"><img border="0" src="https://lh5.googleusercontent.com/-cHqODVYEL5E/TX2Xis7ZZ0I/AAAAAAAAJas/sjC9Q7ddhVk/s640/BddClose.jpg" width="555"></a></div><br>The structure of the Unit Tests is dramatically different from the above classic Unit Tests.<br><br>The first thing you’ll notice is that I am extending the Assertion definitions to clean up some of the assert code that I had in my previous Unit Tests.<br><br>I still have the same logic in from the above Unit Tests that was in the setup and teardown methods, but now you can find those in the before and after methods.<br><br>The syntax of Pavlov is very readable from an English standpoint. You basically describe some scenario in words, and then split it out into code. It was very refreshing once I put it all together.<br><br><pre>QUnit.specify.extendAssertions({<br>    isNotDisplayed: function(actual, expected, message) {<br>        ok(actual.is(":hidden") || actual.text().length == 0, message || "okay: isNotDisplayed");<br>    },<br>    isDisplayed: function (actual, expected, message) {<br>        ok(actual.is(":visible") || actual.text().length > 0, message || "okay: isDisplayed");<br>    }<br>});<br><br>QUnit.init({ moduleTestDelimeter: ", it " });<br>QUnit.specify.globalApi = true;<br>QUnit.specify("Contact", function () {<br><br>    describe("Create", function () {<br><br>        var contactWasPosted;<br><br>        before(function () {<br>            contactWasPosted = false;<br><br>            contactCreateModule.postContactBackup = contactCreateModule.postContact;<br>            contactCreateModule.postContact = function (callback) {<br>                contactWasPosted = true;<br>            };<br><br>            $("#createContact").click();<br>        });<br><br>        after(function () {<br>            contactCreateModule.postContact = contactCreateModule.postContact;<br>            contactCreateModule.createDialog.dialog('close');<br>        });<br><br>        describe("When the contact button is clicked", function () {<br>            it("should display the dialog", function () {<br>                assert($("#createDialog:visible").length).isEqualTo(1);<br>            });<br><br>            it("should not display name validation", function () {<br>                assert($("#Name_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display email validation", function () {<br>                assert($("#Email_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display PhoneNumber validation", function () {<br>                assert($("#PhoneNumber_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display DateOfBirth validation", function () {<br>                assert($("#DateOfBirth_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display IsMarried validation", function () {<br>                assert($("#IsMarried_validationMessage:visible")).isNotDisplayed();<br>            });<br>        });<br><br>        describe("When clicking save on an empty form", function () {<br>            before(function () {<br>                $(".ui-button-text:contains('Save')").parent().click();<br>            });<br><br>            it("should keep the dialog displayed", function () {<br>                assert($("#createDialog:visible").length).isEqualTo(1);<br>            });<br><br>            it("should display Name validation", function () {<br>                assert($("#Name_validationMessage:visible")).isDisplayed();<br>            });<br><br>            it("should display Email validation", function () {<br>                assert($("#Email_validationMessage:visible")).isDisplayed();<br>            });<br><br>            it("should display PhoneNumber validation", function () {<br>                assert($("#PhoneNumber_validationMessage:visible")).isDisplayed();<br>            });<br><br>            it("should display DateOfBirth validation", function () {<br>                assert($("#DateOfBirth_validationMessage:visible")).isDisplayed();<br>            });<br><br>            it("should display IsMarried validation", function () {<br>                assert($("#IsMarried_validationMessage:visible")).isDisplayed();<br>            });<br>        });<br><br>        describe("When clicking save on a completed form", function () {<br>            before(function () {<br>                $("#Name").val("xNamex");<br>                $("#Email").val("tasty@bacon.com");<br>                $("#PhoneNumber").val("xPhoneNumberx");<br>                $("#DateOfBirth").val("xDateOfBirthx");<br>                $("#IsMarried").attr("checked", true);<br><br>                $(".ui-button-text:contains('Save')").parent().click();<br>            });<br><br>            it("should not display name validation", function () {<br>                assert($("#Name_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display email validation", function () {<br>                assert($("#Email_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display PhoneNumber validation", function () {<br>                assert($("#PhoneNumber_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display DateOfBirth validation", function () {<br>                assert($("#DateOfBirth_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should not display IsMarried validation", function () {<br>                assert($("#IsMarried_validationMessage:visible")).isNotDisplayed();<br>            });<br><br>            it("should post contact", function () {<br>                assert(contactWasPosted).isTrue();<br>            });<br><br>            it("should close the dialog", function () {<br>                assert($("#createDialog:visible").length).isEqualTo(0);<br>            });<br>        });<br><br>    });<br><br>});</pre><br><h4>Conclusion</h4><br>The more and more I find myself creating highly dynamic websites, the more I find the need to Unit Test the browser interaction.<br><br>I hope you found the above example helpful. I would be interested to hear what tools you use to help Unit Test your client-side code. Please share… it makes us all better :)<br>You can find some other helpful client-side Unit Testing tools in the Script Junkie article I wrote entitled <a href="http://msdn.microsoft.com/en-us/scriptjunkie/ff452703.aspx" target="_blank">jQuery Test-Driven Development</a>. In addition I wrote <a href="http://elijahmanor.com/webdevdotnet/post/My-7-jQuery-Articles-on-Script-Junkie.aspx" target="_blank">several other jQuery related articles</a> that you can find on Script Junkie.<br><br><strong>Note</strong>:<em> It was not my intention to exhaustively Unit Test everything in the above example. There are other things I would Unit Test, but to make this example easy to understand in a bite-sized chuck, I limited myself to some simple examples.</em><br><br><a href="http://github.com/elijahmanor/jQueryUnitTestingFormValidation">Download Source Code</a><br><br><br><link href="http://alexgorbatchev.com/pub/sh/current/styles/shCore.css" rel="stylesheet" type="text/css"><link href="http://alexgorbatchev.com/pub/sh/current/styles/shThemeRDark.css" rel="stylesheet" type="text/css">