---
layout: post
title: Mocking the jQuery Ajax Call in ASP.NET MVC 3 Music Store
date: '2011-02-10 13:45:00'
---

Sometimes the front-end and back-end of your application progress at different speeds. In order for each layer to progress independently it is optimal if the front-end piece can mock the results of the back-end.<br><br>I have grabbed the AJAX section from the recently updated <a href="http://www.asp.net/mvc/tutorials/mvc-music-store-part-8">ASP.NET MVC 3 Music Store</a> and I slightly tweaked it below.<br><br><pre>$(".RemoveLink").click(function() {<br>  var recordToDelete = $(this).attr("data-id");<br><br>  if (recordToDelete) {<br>    $.post("/ShoppingCart/RemoveFromCart", {<br>      "id": recordToDelete<br>    }, function(data) {<br>      if (data.ItemCount === 0) {<br>        $('#row-' + data.DeleteId).fadeOut('slow');<br>      } else {<br>        $('#item-count-' + data.DeleteId)<br>          .text(data.ItemCount);<br>      }<br><br>      $('#cart-total').text(data.CartTotal);<br>      $('#update-message').text(data.Message);<br>      $('#cart-status')<br>        .text('Cart (' + data.CartCount + ')');<br>    });<br>  }<br>});    <br></pre><br>Let's say for example, that the controller action wasn't yet implemented, but the front-end developer still wanted to progress in their code. To do this we are going to introduce a new tool called <a href="http://enterprisejquery.com/2010/07/mock-your-ajax-requests-with-mockjax-for-rapid-development/">Mockjax</a> to simulate a response from a jQuery ajax call.<br><br>The following code mocks any call to the <code>/ShoopingCart/RemoveFromCart</code> URL and will respond with the following object literal.<br><br><pre>$.mockjax({<br>  url: "/ShoppingCart/RemoveFromCart",<br>  responseTime: 750,<br>  responseText: {         <br>    ItemCount: 5,<br>    DeleteId: 1,<br>    CartTotal: 112.45,<br>    Message: "Your cart has been updated!",<br>    CartCount: 16<br>  }<br>});<br></pre><br>The great thing about the above technique is that you are guaranteed the same response will be returned no matter what request you made to the ajax call. For example, this approach can be very good for Unit Testing. However, if you are trying to demonstrate the code to a client or just want to play around with the behavior then you might want something a little more flexible and dynamic.<br><br>Fortunately, Mockjax not only allows you to return a static set of responseText or repsonseXML, but it also lets you dynamically decide what content you want returned, which is what we are going to demonstrate below.<br><blockquote>Note: <a href="http://enterprisejquery.com/2010/07/mock-your-ajax-requests-with-mockjax-for-rapid-development/">Mockjax</a> offers much more control than what I am showing in this example. I encourage you to check out all of it's features.</blockquote><pre>$.mockjax({<br>  url: "/ShoppingCart/RemoveFromCart",<br>  responseTime: 750,<br>  response: function(settings) {<br>    var row = $("#row-" + settings.data.id),<br>      itemCount = +row.find("td").eq(2)<br>        .text(function(index, text) {<br>          return +$.trim(text) - 1;<br>        }).text(),<br>      cartTotal = 0, cartCount = 0;<br><br>    $("table tr").each(function(index, element) {<br>      var row = $(element),<br>        price = +row.find("td").eq(1).text(),<br>        quantity = +row.find("td").eq(2).text();<br><br>      if (price && quantity) {<br>        cartCount += quantity;<br>        cartTotal += price * quantity;<br>      }<br>    });<br><br>    this.responseText = {         <br>      ItemCount: itemCount,<br>      DeleteId: settings.data.id,<br>      CartTotal: cartTotal.toFixed(2),<br>      Message: "Your cart has been updated!",<br>      CartCount: cartCount<br>    };<br>  }<br>});<br></pre><br>This might seem like excessive front-end code, but the intent is to simulate what the back-end might return in order for the front-end to respond in an appropriate manner. The code is doing some basic calculations to determine what the Shopping Cart quantity and values might be after deleting an item.<br><blockquote>Note: The mockjax response code above could have been simplified somewhat if I had modified the MVC 3 View rendering the HTML, but as in many projects you don't always have access to change the existing output. I decided to go with that approach instead of changing the MVC 3 View code in this blog post. </blockquote><br>Once the back-end code is complete, then you can remove the <code>$.mockjax</code> call from your code-base and it will be hitting your back-end resource instead of the mocked response.<br><br>I captured the HTML, CSS, and JavaScript from the MVC 3 Music Store and put it in the following jsFiddle for you to execute and play around with. The main piece that I added was the mockjax code to simulate the AJAX request and response from the server.<br><br><br><blockquote>Note: You might also consider mockjax to be a great Unit Testing tool as you are developing your front-end code and the back-end isn't yet implemented.</blockquote><br><link href="http://alexgorbatchev.com/pub/sh/current/styles/shCore.css" rel="stylesheet" type="text/css"><link href="http://alexgorbatchev.com/pub/sh/current/styles/shThemeRDark.css" rel="stylesheet" type="text/css"><br>