---
layout: post
title: Performance of JavaScript Looping Techniques
date: '2009-12-23 04:46:00'
---

<p>I was reading Paul Irish’s (@paul_irish) recent blog post entitled <a href="http://paulirish.com/2009/updates-from-all-around-dec-2009/" target="_blank">Updates from all around – Dec 2009</a> and I saw an interesting for loop syntax that he referenced…</p>  <pre>for (var i = -1, len = arr.length; ++i < len; ) // the cool guy loop</pre> <p>He went on further to show some <a href="http://paulirish.com/i/d9f0.png" target="_blank">performance results</a> of the above syntax compared to the old for loop style most of us are used to.</p> <p>I thought this was interesting, so I decided to put my own suite of tests together to exercise various looping techniques and determine their average performance.  </p> <p><strong>Note</strong>: In my test methods I wanted to simulate a semi-real world scenario where an array would be used and in the loop an item from the array would be referenced.</p> <p>The test runner accepts the size of the array to be looped and the number of times you want the test to be ran. The end result will print the average time (in milliseconds) the test took to the console. </p> <p>Here are the functions that I am profiling…</p> <pre>function oldAndBusted() {<br>   for (var i = 0; i < arr.length; ++i) { arr[i]; }<br>}<br><br>function oldAndBustedCached() {<br>   var arrLength = arr.length;<br>   for (var i = 0; i < arrLength; ++i) { arr[i]; }<br>}<br><br>function coolGuyLoop() {<br>   for (var i = -1, len = arr.length; ++i < len; ) { arr[i]; } <br>}<br><br>function coolGuyLoopCached() {<br>   var arrLength = arr.length;<br>   for (var i = -1, len = arrLength; ++i < len; ) { arr[i]; } <br>}<br><br>function whileLoopCached() {<br>   var i = 0, arrLength = arr.length;<br>   while (i < arrLength) { arr[i]; i++; }<br>}<br><br>function reverseWhileLoop() {<br>   var i = arr.length; <br>   while (i--) { arr[i]; }<br>}</pre> <p>Here are the results of my testing...</p> <p><a href="http://jsbin.com/uvoye/edit" target="_blank"><img title="JavaScriptLoopPerformance2" border="0" alt="JavaScriptLoopPerformance2" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=JavaScriptLoopPerformance2.png" width="667" height="440"></a> </p> <p></p> <p>You can view, run, and edit the tests for yourself on JS Bin (<a href="http://jsbin.com/uvoye/edit" target="_blank">jsbin.com/uvoye/edit</a>) </p> <p>From a speed perspective here is how the various looping techniques ranked against each other (#1 being fastest & #6 being slowest)</p> <ol><li>Reverse While Loop </li>   <li>The Cool Guy Loop </li>   <li>Old and Busted Cached </li>   <li>While Loop Cached </li>   <li>The Cool Guy Loop Cached </li>   <li>Old and Busted </li></ol><ol>I was actually surprised that ‘the cool guy loop cached’ was slower than ‘the cool guy loop’. I was thinking if I saved off the array length into a variable that it would speed up the loop instead of accessing the length every time.</ol><ol><strong>Note</strong>: If you have any variations of a loop you would like to see in my test cases, please provide a comment with your suggestion. </ol><p><a href="http://jsbin.com/uvoye" target="_blank"><img title="cooltext439924698" border="0" alt="cooltext439924698" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=cooltext439924698_2.png" width="121" height="62"></a> <a href="http://jsbin.com/uvoye/edit" target="_blank"><img title="cooltext439925164" border="0" alt="cooltext439925164" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=cooltext439925164_2.png" width="344" height="62"></a></p> <p><strong>Note</strong>: The above performance times were ran using <a href="http://www.mozilla.com/en-US/firefox/firefox.html" target="_blank">FireFox</a> 3.6 Beta 4 using <a href="https://addons.mozilla.org/en-US/firefox/addon/1843" target="_blank">FireBug</a> 1.5X.0b8 on an Intel Quad Core 2.00GHz Laptop running Win7.</p>