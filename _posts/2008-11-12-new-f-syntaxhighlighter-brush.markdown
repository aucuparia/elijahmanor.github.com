---
layout: post
title: New F# SyntaxHighlighter Brush
date: '2008-11-12 14:12:00'
---

<p>Ever since my previous blog about <a href="http://webdevdotnet.blogspot.com/2008/10/code-highlighters-for-your-blog.html" target="_blank">Code Highlighters For Your Blog</a>, I have heard several people interested in implementing the <a href="http://code.google.com/p/syntaxhighlighter/" target="_blank">SyntaxHighlighter</a> on their blog. If so, there is a good article by <a href="http://developertips.blogspot.com/2007/08/syntaxhighlighter-on-blogger.html" target="_blank">Guogang Hu</a> about integrating it into your Blogger blog.</p><p>One of those individuals was my friend, <a href="http://bloggemdano.blogspot.com/" target="_blank">Daniel Mohl</a> (via twitter... <a href="http://twitter.com/dmohl" target="_blank">@dmohl</a>). However, Daniel had a need to support F#, which is not one of the out-of-the-box languages that is supported by the SyntaxHighlighter. I saw this as a fun side project to support this language for him.</p><p>F.Y.I. If you like F#, his <a href="http://bloggemdano.blogspot.com/" target="_blank">blog</a> is definitely one you should check out!</p><p>Here is an example F# program that is only a proof of concept that Dan put together for me to exercise the F# brush sufficiently... it doesn't actually work! :) I am just starting to learn the language, so please give me some slack!</p><p>If you find any areas that I missed while supporting the language, please let me know and I'll fix it. Feel free to download and use the <a href="http://elijah.manor.googlepages.com/shBrushFSharp.js">F# SyntaxHighlighter Brush</a> and provide any suggestions or comments.</p><p><span>Note: The JavaScript file has been minimized with <a href="http://www.crockford.com/" target="_blank">JSMin</a>, so it might be a little difficult to read.</span></p><p>I'd like to contribute the F# Brush to the Google Code project, but I am not yet a contributor on the project. If I am able to become a contributor, then I will post the code as part of the main project.</p><pre>#light<br>namespace testforElijah<br>module testModuleForElijah<br>open System<br>let multiple x = x * x<br>val CalculateSeqExample: seq<int> -> int<br>type ICustomerDao = interface<br>    abstract GetById: int -> ICustomer<br>end<br>type CustomerDao = class<br>    new: unit -> CustomerDao<br>    interface ICustomerDao<br>end<br>if<br>then<br>elif<br>else<br>@"c:\test\test.xml"<br>'c'<br>"xyz"B<br>"tes"+"t"<br>[for x in list -> expr]<br>type 'a option = <br>  | None<br>  | Some of 'a<br><br>//This is a test<br>let showSomething (name, something)<br>  match name with<br>    | Some  (some, thing) -> (* do something*)<br>    | None<br><br>type node = <br>  { Name : string;<br>    Links : list list;}<br>and link = <br>  | Dangling<br>  | Link of node <br></pre>