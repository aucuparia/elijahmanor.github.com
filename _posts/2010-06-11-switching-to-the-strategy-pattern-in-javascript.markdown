---
layout: post
title: Switching to the Strategy Pattern in JavaScript
date: '2010-06-11 13:40:00'
---

<h4>A Typical Switch Statement Scenario</h4>  <p>Recently I’ve been working on some highly dynamic User Interfaces and at one point in the project I found my first reflex on a certain task to use a switch statement in JavaScript.</p>  <p>Now, my previous training in studying the <a href="http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124" target="_blank">Design Patterns</a> has told me that the switch statement is bad. The design pattern drilled into me to resolve the switch statement is the the Strategy Pattern, however, I’ve never used the Strategy Pattern in JavaScript before.</p>  <p>The following example is a simple demo application where I start with a switch statement and then refactor the code later in the blog post to use the Strategy Pattern. </p>  <h4>A Simple Super Hero Demo Application</h4>  <p><a href="http://elijahmanor.com/webdevdotnet/image.axd?picture=SuperHeroShadow.jpg"><img title="SuperHeroShadow" border="0" alt="SuperHeroShadow" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=SuperHeroShadow_thumb.jpg" width="629" height="516"></a> </p>  <p>The sample application is a Super Hero creator. You provide a Super Hero name and then you select your Super Hero power. The power can be a variety of things ranging from Flying, Invisibility, to nothing at all. Some of the powers have additional questions (metadata) about that particular power.</p>  <p>Once the Super Hero is created, the application should build up a object with the appropriate power type and supporting metadata. For now, I’m just outputting the object in the Firebug Lite console using console.dir().</p>  <h4>First Pass at a Switch Statement Solution</h4>  <p>Here is the above application written using a switch statement to build up the Power type and metadata. The solution is fairly simple in nature. I am utilizing the <a href="http://www.klauskomenda.com/code/javascript-programming-patterns/" target="_blank">Revealing Module Pattern</a>.</p>  <p>Note: You can view, run, and edit the following code… <a title="http://jsfiddle.net/elijahmanor/KzAMX/" href="http://jsfiddle.net/elijahmanor/KzAMX/" target="_blank">http://jsfiddle.net/elijahmanor/KzAMX/</a></p>  <pre>var superHeroModule = (function () {<br>    var public = {};<br><br>    public.init = function() {<br>        $("input:radio[name='Power']").click(function() {<br>            var selectedPower = this.value;<br><br>            $("#powers .power").hide();<br>            $("#powers ." + selectedPower).show();<br>        });<br><br>        $("#create").click(function() {<br>            var superHero = public.scrapeSuperHero();<br>            console.dir(superHero);<br>        });<br>    };<br><br>    public.scrapeSuperHero = function() {<br>        var superHero = {};<br><br>        superHero.Name = $("#Name").val();<br>        superHero.Power = public.scrapePower();<br><br>        return superHero;<br>    };<br><br>    public.scrapePower = function() {<br>        var power = {};<br><br>        var selectedPower = $("input:radio[name='Power']:checked").val();<br>        switch (selectedPower) {<br>            case "Flying" : <br>                power.type = "Flying";<br>                power.speed = $("#flyingSpeed").val();<br>                break;<br>            case "Invisibility" :<br>                power.type = "Invisibility";<br>                break;<br>            case "Strength" :<br>                power.type = "Strength";<br>                power.lift = $("#strengthLift").val();<br>                power.strongerThan = $("#strengthStrongerThan").val();<br>                break;<br>            case "Vision" : <br>                power.type = "Vision";<br>                power.distance = $("#visionDistance").val();<br>                power.seeInDark = $("#visionDark").is(":checked");<br>                power.xrayVision = $("#visionXray").is(":checked");<br>                break;<br>        }<br><br>        return power;<br>    };<br><br>    return public;<br>} ());<br><br>superHeroModule.init();</pre> <p><strong></strong></p> <p><strong><a href="http://jsfiddle.net/elijahmanor/KzAMX/" target="_blank"><img title="cooltext439925164" border="0" alt="cooltext439925164" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=cooltext439925164_14.png" width="244" height="45"></a> </strong></p> <p><strong>Pros of this Solution</strong></p> <ul><li>Simple Implementation </li>   <li>All the code is in one place to handle building up the Super Hero power metadata </li></ul><p><strong>Cons of this Solution</strong></p> <p>For those of you aware of <a href="http://www.objectmentor.com/omTeam/martin_r.html" target="_blank">Bob Martin’s</a> (<a href="http://twitter.com/unclebobmartin" target="_blank">@unclebobmartin</a>) <a href="http://en.wikipedia.org/wiki/Solid_(object-oriented_design)" target="_blank">SOLID Principles</a>, the “O” represents the <a href="http://en.wikipedia.org/wiki/Open/closed_principle" target="_blank">Open/Closed Principle</a> which states that…</p> <blockquote>  <p>Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification</p></blockquote> <p></p> <p>The switch solution violates the Open/Closed Principle in that every time a new Super Hero power is added to the list that the same piece of code will need to be modified. This is problematic in that new bugs can easily be introduced as new features are added or as defects are resolved.</p> <p>Let’s look at a better way to solve the solution.</p> <h4>Refactoring Using the Strategy Pattern </h4> <p>A lof of the code will remain the same in the refactored solution. We mainly want to pull out the switch statement into something that is more maintainable and less error prone for future enhancment. </p> <p>Note: You can view, run, and edit the following code… <a href="http://jsfiddle.net/elijahmanor/K8CkZ/" target="_blank">http://jsfiddle.net/elijahmanor/K8CkZ/</a></p> <pre>var superHeroModule = (function () {<br>    var public = {};<br><br>    public.init = function() {<br>        $("input:radio[name='Power']").click(function() {<br>            var selectedPower = this.value;<br><br>            $("#powers .power").hide();<br>            $("#powers ." + selectedPower).show();<br>        });<br><br>        $("#create").click(function() {<br>            var superHero = public.scrapeSuperHero();<br>            console.dir(superHero);<br>        });<br>    };<br><br>    public.scrapeSuperHero = function() {<br>        var superHero = {};<br><br>        superHero.Name = $("#Name").val();<br>        superHero.Power = public.scrapePower();<br><br>        return superHero;<br>    };<br><br>    public.scrapePower = function() {<br>        var power = {};<br><br>        var selectedPower = $("input:radio[name='Power']:checked").val();<br>        var scrapePowerFunction = "public.scrapePower" + selectedPower;<br>        power = eval(scrapePowerFunction)();<br><br>        return power;<br>    };<br><br>    public.scrapePowerFlying = function() {<br>        var power = {};<br><br>        power.type = "Flying";<br>        power.speed = $("#flyingSpeed").val();<br><br>        return power;<br>    };<br><br>    public.scrapePowerInvisibility = function() {<br>        var power = {};<br><br>        power.type = "Invisibility";<br><br>        return power;<br>    };<br><br>    public.scrapePowerStrength = function() {<br>        var power = {};<br><br>        power.type = "Strength";<br>        power.lift = $("#strengthLift").val();<br>        power.strongerThan = $("#strengthStrongerThan").val();        <br><br>        return power;    <br>    };<br><br>    public.scrapePowerVision = function() {<br>        var power = {};<br><br>        power.type = "Vision";<br>        power.distance = $("#visionDistance").val();<br>        power.seeInDark = $("#visionDark").is(":checked");<br>        power.xrayVision = $("#visionXray").is(":checked");<br><br>        return power;<br>    };<br><br>    return public;<br>} ());<br><br>superHeroModule.init();</pre> <p><strong></strong></p> <p><strong><a href="http://jsfiddle.net/elijahmanor/K8CkZ/" target="_blank"><img title="cooltext439925164" border="0" alt="cooltext439925164" src="http://elijahmanor.com/webdevdotnet/image.axd?picture=cooltext439925164_15.png" width="244" height="45"></a> </strong></p> <p><strong>Pros of this Solution</strong></p> <ul><li>Abides by the Open/Closed Principle by opening the code for extension, but closing it for modification. </li></ul><p><strong>Cons of this Solution</strong></p> <ul><li>The solution is more complex than the previous switch statement implementation </li>   <li>You might have noticed the use of the eval function. <a href="http://en.wikipedia.org/wiki/Douglas_Crockford" target="_blank">Douglas Crockford</a> labeled the eval function as a <a href="http://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html" target="_blank">Bad Part of JavaScript</a> for some very good reasons, however, in this case I think the benefits it brings in this situation outweighs the risks. With every hard and fast rule, there comes a place and time to examine the benefits and risks. </li></ul><h4>Conclusion</h4> <p>I found that separating the switch statement logic into the above Strategy Pattern has made my current project much more maintainable and less error prone when adding new features.</p> <p>How have you addressed similar situation? Have you implemented a different solution to the switch statement problem? Please share with me, I’d love to know!</p>