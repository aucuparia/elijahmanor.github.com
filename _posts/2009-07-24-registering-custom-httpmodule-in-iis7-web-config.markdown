---
layout: post
title: Registering Custom HttpModule in IIS7 Web.config
date: '2009-07-24 08:07:00'
---

<p><i></i></p>  <p><i></i></p>  <p>I’ve been writing an Error Hander HttpModule for a current ASP.NET WebForm project and things were going well until my last merge with TFS. All of a sudden, my HttpModule wouldn’t register anymore. </p>  <p>For the life of me I couldn't’ figure out what had changed. I spent half the day trying to figure out what in the world was going on.</p>  <p>Here is the chain of events that I tried before finding the actual solution. If you want, you can just skip to the end to find the answer :)</p>  <p>First, I decided to strongly sign the assembly with the HttpModule (even thought it wasn’t necessary previously)…</p>  <div>   <p>So, I created a new Strong Name Key from the properties window of my HttpModule project from Visual Studio 2008</p>   <a href="http://elijahmanor.com/webdevdotnet/content/binary/WindowsLiveWriter/RegisteringCustomHttpModuleinIIS7.config_ED24/CreateKey_2.png"><img title="CreateKey" border="0" alt="CreateKey" src="http://elijahmanor.com/webdevdotnet/content/binary/WindowsLiveWriter/RegisteringCustomHttpModuleinIIS7.config_ED24/CreateKey_thumb.png" width="604" height="384"></a>     <p></p>    <p></p>   Then, in order for me to get the Public Key Token to decorate the HttpModule entry in the web.config, I used the following command line tool     <pre>sn –T ErrorFramework.dll</pre>   <p>Note: You might consider integrating this command into a <a href="http://blogs.msdn.com/miah/archive/2008/02/19/visual-studio-tip-get-public-key-token-for-a-stong-named-assembly.aspx" target="_blank">Get Public Key Token External Tool</a> in Visual Studio 2008.</p>   <p>Here is what my original web.config entry looked like before:</p>   <pre><add name="ExceptionModule" type="ErrorFramework.ExceptionModule, ErrorFramework" /> </pre>   <p>and after all of the above steps I was able to update my web.config to the following:</p>   <pre><add name="ExceptionModule" type="ErrorFramework.ExceptionModule, ErrorFramework, Version=1.0.0.0, Culture=neutral, PublicKeyToken=7125b1d9a03db888" />      </pre>   <p><i>However, to my dismay the HttpModule still did not register!</i></p></div> <p><em>Secondly, I tried dynamically registering my HttpModule in the Global.asax instead of relying upon the web.config. </em></p> <div>  <pre>namespace ErrorFramework<br>{<br>    public class Global : System.Web.HttpApplication<br>    {<br>        public static ExceptionModule errorModule = new ExceptionModule();<br><br>        public override void Init()<br>        {<br>            base.Init();<br>            exceptionModule.Init(this);<br>        }<br>    }<br>}</pre>   <p><em>This thankfully worked fine, but I really wanted the web.config option to work so that I could add or remove the HttpModule at will without having to change and recompile code.</em></p></div> <p><em>Thirdly, I decided to use Visual Studio’s internal webserver (Cassini).</em></p> <div>  <p>To my surprise the HttpModule started to work again! Although, I was excited that it worked… I was also very confused because I thought it should work through IIS7 as well. So, back to the drawing board.</p></div> <p><em>Fourthly, I finally found the answer I was looking for.</em></p> <div>  <p>Apparently, IIS7 looks in the system.webSever/modules section of the web.config and not in the system.web/httpModules section like IIS5 & IIS6. It turns out that the web.config that our project has both sections defined in the config file!</p>   <p><em>So, instead of this…</em></p>   <pre><system.web><br>    <!-- Misc XML --><br>    <httpModules><br>        <add name="ExceptionModule" type="ErrorFramework.ExceptionModule, SG.SSP.Darwin.WebPortalFramework, Version=1.0.0.0, Culture=neutral, PublicKeyToken=7125b1d9a03db888" />      <br>    </httpModules><br>    <!-- Misc XML --><br></system.web></pre>   <p><em>I needed to do this…</em></p>   <pre><system.webServer><br>    <!-- Misc XML --> <br>    <modules> <br>        <add name="ExceptionModule" type="ErrorFramework.ExceptionModule, SG.SSP.Darwin.WebPortalFramework, Version=1.0.0.0, Culture=neutral, PublicKeyToken=7125b1d9a03db888" /> <br>    </modules><br>    <!-- Misc XML --> <br></system.webServer></pre></div> <p><em><strong>Note</strong>: If you want it to work both on IIS7 and through Cassini, then you’ll need to define it in both places ;)</em></p>