---
layout: post
title: jQuery Flexigrid Using C# 3.0 (.NET 3.5) &amp; LINQ
date: '2008-07-23 12:49:00'
---

When I developed my first ASP.NET MVC application, I was a little disappointed with my options for a rich grid. I initially used the grid that is part of the MVCContrib project, but it is pretty simple and there aren’t many features out of the box.<br><br>I was very pleased with the code of my MVC application, but the presentation was so 1990's. With all of this new technology I thought the presentation deserved something snappy. That is when I found Flexigrid.<br><br>As I mentioned in my last blog entry, I started to use <a href="http://jquery.com/">jQuery</a>. To my joy, <a href="http://www.flexigrid.info/">Flexigrid</a> is a jQuery plugin! Flexigrid uses jQuery to asynchronously populate the contents of the grid using either XML or JSON input.<br><br>The following is an example of what the grid looks like. It contains features to sort, page, search, move columns, resize, etc…<br><br><a href="http://lh6.ggpht.com/elijah.manor/SIcoxutczpI/AAAAAAAAD3M/GtAAJaX-MwQ/s1600-h/flexigridExample%5B5%5D.jpg"><img alt="flexigridExample" border="0" height="186" src="http://lh4.ggpht.com/elijah.manor/SIcoyQyP_kI/AAAAAAAAD3Q/kESTYAXKeyY/flexigridExample_thumb%5B3%5D.jpg?imgmax=800" title="flexigridExample" width="404"></a><br><br>The User Interface portion was pretty straightforward to put together. You just need to define your columns, the data source, and some additional parameters (such as: search terms, size, etc…). <br><br><pre>   <br></pre><table></table><br><br><br>I wanted to use this opportunity to try out some new features of .NET 3.5, so I wanted to incorporate LINQ and JSON serialization. <br><br>To do this, I needed to setup some classes that the Flexigrid will recognize once serialized. Here is what I came up with.<br><div><div><pre><span>   1:</span> <span>public</span> <span>class</span> FlexigridViewData</pre><pre><span>   2:</span> {</pre><pre><span>   3:</span>     <span>public</span> <span>int</span> page;</pre><pre><span>   4:</span>     <span>public</span> <span>int</span> total;</pre><pre><span>   5:</span>     <span>public</span> List<FlexigridRow> rows = <span>new</span> List<FlexigridRow>();</pre><pre><span>   6:</span> }</pre><pre><span>   7:</span>  </pre><pre><span>   8:</span> <span>public</span> <span>class</span> FlexigridRow</pre><pre><span>   9:</span> {</pre><pre><span>  10:</span>     <span>public</span> <span>long</span> id;</pre><pre><span>  11:</span>     <span>public</span> List<<span>string</span>> cell;</pre><pre><span>  12:</span> }</pre></div></div>Now is the part where the fun begins. I had already retrieved the content I needed from the Middle Tier. I use LINQ to query the generic list to obtain the correct page subset and then use a helper extension method to serialize the contents to JSON.<br><div><div><pre><span>   1:</span> <span>public</span> <span>void</span> Page_Load()</pre><pre><span>   2:</span> {</pre><pre><span>   3:</span>     Response.Clear();</pre><pre><span>   4:</span>     Response.ContentType = <span>"text/x-json"</span>;</pre><pre><span>   5:</span>     Response.Write(GetPagedContent());</pre><pre><span>   6:</span>     Response.Flush();</pre><pre><span>   7:</span>     Response.End();</pre><pre><span>   8:</span> }</pre><pre><span>   9:</span>  </pre><pre><span>  10:</span> <span>private</span> <span>string</span> GetPagedContent()</pre><pre><span>  11:</span> {</pre><pre><span>  12:</span>     var pageIndex = Convert.ToInt32(Request.Params[<span>"page"</span>]);</pre><pre><span>  13:</span>     var itemsPerPage = Convert.ToInt32(Request.Params[<span>"rp"</span>]);</pre><pre><span>  14:</span>     var sortName = Request.Params[<span>"sortname"</span>];</pre><pre><span>  15:</span>     var sortOrder = Request.Params[<span>"sortorder"</span>];</pre><pre><span>  16:</span>     var query = Request.Params[<span>"query"</span>];</pre><pre><span>  17:</span>  </pre><pre><span>  18:</span>     IEnumerable<Contact> pagedContacts;</pre><pre><span>  19:</span>     <span>if</span> (<span>string</span>.IsNullOrEmpty(query))</pre><pre><span>  20:</span>     {</pre><pre><span>  21:</span>         pagedContacts = sortOrder.Equals(<span>"asc"</span>) ?</pre><pre><span>  22:</span>             Contacts.OrderBy(contact => contact.GetPropertyValue<IComparable>(sortName)) :</pre><pre><span>  23:</span>             Contacts.OrderByDescending(contact => contact.GetPropertyValue<IComparable>(sortName));                </pre><pre><span>  24:</span>     }</pre><pre><span>  25:</span>     <span>else</span></pre><pre><span>  26:</span>     {</pre><pre><span>  27:</span>         Func<Contact, <span>bool</span>> whereClause = (contact => contact.GetPropertyValue<<span>string</span>>(sortName).Contains(query));</pre><pre><span>  28:</span>         pagedContacts = sortOrder.Equals(<span>"asc"</span>, StringComparison.CurrentCultureIgnoreCase) ?</pre><pre><span>  29:</span>             Contacts.Where(whereClause).OrderByDescending(contact => contact.GetPropertyValue<IComparable>(sortName)) :</pre><pre><span>  30:</span>             Contacts.Where(whereClause).OrderBy(contact => contact.GetPropertyValue<IComparable>(sortName));</pre><pre><span>  31:</span>     }</pre><pre><span>  32:</span>     <span>int</span> count = pagedContacts.Count();</pre><pre><span>  33:</span>     pagedContacts = pagedContacts.Skip((pageIndex - 1) * itemsPerPage).Take(itemsPerPage);</pre><pre><span>  34:</span>  </pre><pre><span>  35:</span>     <span>const</span> <span>string</span> imageLinkFormat = <span>@"<a href="</span><span>"{0}"</span><span>"><img src="</span><span>"{1}"</span><span>" border="</span><span>"0"</span><span>" /></a>"</span>;</pre><pre><span>  36:</span>     <span>const</span> <span>string</span> imageFormat = <span>@"<img src="</span><span>"{0}"</span><span>" border="</span><span>"0"</span><span>" />"</span>;</pre><pre><span>  37:</span>     var flexigrid = <span>new</span> FlexigridViewData {page = pageIndex, total = count};</pre><pre><span>  38:</span>     <span>foreach</span> (var contact <span>in</span> pagedContacts)</pre><pre><span>  39:</span>     {</pre><pre><span>  40:</span>         flexigrid.rows.Add(<span>new</span> FlexigridRow</pre><pre><span>  41:</span>         {</pre><pre><span>  42:</span>             id = contact.ID,</pre><pre><span>  43:</span>             cell = <span>new</span> List<<span>string</span>> </pre><pre><span>  44:</span>             { </pre><pre><span>  45:</span>                 <span>string</span>.Format(imageLinkFormat, ResolveUrl(<span>"~/Contact.mvc/Detail/"</span> + contact.ID), </pre><pre><span>  46:</span>                 ResolveUrl(<span>"~/Images/Detail.gif"</span>)), </pre><pre><span>  47:</span>                 contact.ID.ToString(), </pre><pre><span>  48:</span>                 contact.FirstName, </pre><pre><span>  49:</span>                 contact.LastName, </pre><pre><span>  50:</span>                 contact.DateOfBirth.ToShortDateString(), </pre><pre><span>  51:</span>             }</pre><pre><span>  52:</span>         });</pre><pre><span>  53:</span>     }</pre><pre><span>  54:</span>  </pre><pre><span>  55:</span>     <span>return</span> flexigrid.ToJson();    </pre><pre><span>  56:</span> }</pre></div></div>Here are some helper extension methods that I used to complete the above code snippets.<br><div><div><pre><span>   1:</span> <span>public</span> <span>static</span> <span>class</span> JsonHelper</pre><pre><span>   2:</span> {</pre><pre><span>   3:</span>     <span>public</span> <span>static</span> <span>string</span> ToJson(<span>this</span> <span>object</span> obj)</pre><pre><span>   4:</span>     {</pre><pre><span>   5:</span>         var serializer = <span>new</span> JavaScriptSerializer();</pre><pre><span>   6:</span>  </pre><pre><span>   7:</span>         <span>return</span> serializer.Serialize( obj );</pre><pre><span>   8:</span>     }</pre><pre><span>   9:</span>  </pre><pre><span>  10:</span>     <span>public</span> <span>static</span> <span>string</span> ToJson(<span>this</span> <span>object</span> obj, <span>int</span> recursionDepth)</pre><pre><span>  11:</span>     {</pre><pre><span>  12:</span>         var serializer = <span>new</span> JavaScriptSerializer();</pre><pre><span>  13:</span>  </pre><pre><span>  14:</span>         serializer.RecursionLimit = recursionDepth;</pre><pre><span>  15:</span>  </pre><pre><span>  16:</span>         <span>return</span> serializer.Serialize( obj );</pre><pre><span>  17:</span>     }</pre><pre><span>  18:</span> }</pre></div></div><div><div><pre><span>   1:</span> <span>public</span> <span>static</span> T GetPropertyValue<T>(<span>this</span> <span>object</span> component, <span>string</span> propertyName)</pre><pre><span>   2:</span> {</pre><pre><span>   3:</span>     <span>return</span> (T) TypeDescriptor.GetProperties(component)[propertyName].GetValue(component);</pre><pre><span>   4:</span> }</pre></div></div>As a side note, I did have to dive into the JavaScript and fix two issues that I came across, but other than that it works like a charm.<br>I would prefer if the developer of the product had a better system of tracking bugs and maintaining a <a href="http://codeigniter.com/forums/viewthread/75326/">forum</a>, but in the meantime what is setup is sufficient.